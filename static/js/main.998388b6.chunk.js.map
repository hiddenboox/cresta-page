{"version":3,"sources":["hooks/useCrestaWidget.js","hooks/useScript.js","components/CrestaWidget/CrestaWidget.js","App.js","reportWebVitals.js","index.js"],"names":["useCrestaWidget","src","config","window","CrestaChatWidget","status","React","useState","setStatus","useEffect","script","document","querySelector","getAttribute","createElement","async","defer","type","setAttribute","body","appendChild","setAttributeFromEvent","event","addEventListener","setStateFromEvent","removeEventListener","useScript","CrestaWidget","crestaConfig","namespace","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mMAEaA,EAAkB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OAMnC,OALAC,OAAOC,iBAAmB,CACtBF,UAIG,CAAEG,OCNY,SAAC,GAAa,IAAXJ,EAAU,EAAVA,IAAU,EACNK,IAAMC,SAASN,EAAM,UAAY,QAD3B,mBAC3BI,EAD2B,KACnBG,EADmB,KAgDlC,OA7CAF,IAAMG,WAAU,WAChB,GAAKR,EAAL,CAKA,IAAIS,EAASC,SAASC,cAAT,sBAAsCX,EAAtC,OAEb,GAAKS,EAmBDF,EAAUE,EAAOG,aAAa,oBAnBrB,EACTH,EAASC,SAASG,cAAc,WACzBb,IAAMA,EACbS,EAAOK,OAAQ,EACfL,EAAOM,OAAQ,EACfN,EAAOO,KAAO,SACdP,EAAOQ,aAAa,cAAe,WACnCP,SAASQ,KAAKC,YAAYV,GAE1B,IAAMW,EAAwB,SAACC,GAAW,IAAD,EACjC,QAAN,EAAAZ,SAAA,SAAQQ,aACN,cACe,SAAfI,EAAML,KAAkB,QAAU,UAItCP,EAAOa,iBAAiB,OAAQF,GAChCX,EAAOa,iBAAiB,QAASF,GAKnC,IAAMG,EAAoB,SAACF,GACzBd,EAAyB,SAAfc,EAAML,KAAkB,QAAU,UAM9C,OAHAP,EAAOa,iBAAiB,OAAQC,GAChCd,EAAOa,iBAAiB,QAASC,GAE1B,WACDd,IACFA,EAAOe,oBAAoB,OAAQD,GACnCd,EAAOe,oBAAoB,QAASD,KAtCtChB,EAAU,UAyCX,CAACP,IAEG,CAAEI,UD5CUqB,CAAU,CAAEzB,QAAvBI,SEJCsB,EAAe,SAAC,GAAqB,IAAnB1B,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,OAEhC,OADAF,EAAgB,CAAEC,MAAKC,WAChB,M,OCCL0B,EAAe,CACnBC,UAAW,aAeEC,MAZf,WACE,OACE,qCACA,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,iBAGpB,cAAC,EAAD,CAAc7B,OAAQ0B,EAAc3B,IAAI,gFCJ7B+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,K","file":"static/js/main.998388b6.chunk.js","sourcesContent":["import { useScript } from \"./useScript\";\n\nexport const useCrestaWidget = ({ src, config }) => {\n    window.CrestaChatWidget = {\n        config\n    };\n    const { status } = useScript({ src })\n\n    return { status };\n}","import React from 'react';\n\nexport const useScript = ({ src }) => {\n    const [status, setStatus] = React.useState(src ? 'loading' : 'idle');\n\n    React.useEffect(() => {\n    if (!src) {\n        setStatus('idle');\n        return;\n    }\n\n    let script = document.querySelector(`script[src=\"${src}\"]`);\n\n    if (!script) {\n        script = document.createElement('script');\n        script.src = src;\n        script.async = true;\n        script.defer = true;\n        script.type = \"module\";\n        script.setAttribute('data-status', 'loading')\n        document.body.appendChild(script)\n\n        const setAttributeFromEvent = (event) => {\n          script?.setAttribute(\n            'data-status',\n            event.type === 'load' ? 'ready' : 'error',\n          )\n        }\n\n        script.addEventListener('load', setAttributeFromEvent)\n        script.addEventListener('error', setAttributeFromEvent)\n      } else {\n        setStatus(script.getAttribute('data-status'))\n      }\n\n      const setStateFromEvent = (event) => {\n        setStatus(event.type === 'load' ? 'ready' : 'error')\n      }\n\n      script.addEventListener('load', setStateFromEvent)\n      script.addEventListener('error', setStateFromEvent)\n\n      return () => {\n        if (script) {\n          script.removeEventListener('load', setStateFromEvent)\n          script.removeEventListener('error', setStateFromEvent)\n        }\n      }\n    }, [src]);\n\n    return { status };\n}","import { useCrestaWidget } from '../../hooks/useCrestaWidget';\n\nexport const CrestaWidget = ({ src, config }) => {\n    useCrestaWidget({ src, config })\n    return null\n}","import React from 'react';\n\nimport './App.css';\nimport { CrestaWidget } from './components/CrestaWidget';\n\nconst crestaConfig = {\n  namespace: \"fis-ethos\"\n}\n\nfunction App() {\n  return (\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n    <CrestaWidget config={crestaConfig} src=\"https://cdn.cresta.com/visitor_chat_widget/bundle/cresta-chat-widget.js\" />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}